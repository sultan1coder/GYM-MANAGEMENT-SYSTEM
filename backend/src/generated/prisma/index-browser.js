
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  phone_number: 'phone_number',
  password: 'password',
  role: 'role',
  profile_picture: 'profile_picture',
  isActive: 'isActive',
  email_verified: 'email_verified',
  lastLogin: 'lastLogin',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  bio: 'bio',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  department: 'department',
  position: 'position',
  tokenVersion: 'tokenVersion',
  created_at: 'created_at',
  updated_at: 'updated_at',
  resetToken: 'resetToken',
  resetTokenExp: 'resetTokenExp'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  deviceType: 'deviceType',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAccessLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.UserIPRestrictionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  type: 'type',
  reason: 'reason',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserAddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserEmergencyContactScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSocialMediaScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  linkedin: 'linkedin',
  twitter: 'twitter',
  facebook: 'facebook',
  instagram: 'instagram',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  theme: 'theme',
  language: 'language',
  timezone: 'timezone',
  dateFormat: 'dateFormat',
  timeFormat: 'timeFormat',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserNotificationSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email_loginAlerts: 'email_loginAlerts',
  email_securityUpdates: 'email_securityUpdates',
  email_systemAnnouncements: 'email_systemAnnouncements',
  email_marketingEmails: 'email_marketingEmails',
  push_loginAlerts: 'push_loginAlerts',
  push_securityUpdates: 'push_securityUpdates',
  push_systemAnnouncements: 'push_systemAnnouncements',
  push_marketingNotifications: 'push_marketingNotifications',
  sms_loginAlerts: 'sms_loginAlerts',
  sms_securityUpdates: 'sms_securityUpdates',
  sms_emergencyAlerts: 'sms_emergencyAlerts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPrivacySettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  profileVisibility: 'profileVisibility',
  showEmail: 'showEmail',
  showPhone: 'showPhone',
  showLocation: 'showLocation',
  allowContact: 'allowContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone_number: 'phone_number',
  password: 'password',
  age: 'age',
  profile_picture: 'profile_picture',
  membershiptype: 'membershiptype',
  terms_accepted: 'terms_accepted',
  terms_accepted_at: 'terms_accepted_at',
  email_verified: 'email_verified',
  email_verification_token: 'email_verification_token',
  email_verification_expires: 'email_verification_expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberCheckInScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  location: 'location',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberAttendanceScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  date: 'date',
  timeIn: 'timeIn',
  timeOut: 'timeOut',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberFitnessGoalScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  goalType: 'goalType',
  targetValue: 'targetValue',
  currentValue: 'currentValue',
  unit: 'unit',
  targetDate: 'targetDate',
  isCompleted: 'isCompleted',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  name: 'name',
  relationship: 'relationship',
  phone: 'phone',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalInfoScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  fitness_goals: 'fitness_goals',
  health_conditions: 'health_conditions',
  allergies: 'allergies',
  medications: 'medications',
  emergency_notes: 'emergency_notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  memberId: 'memberId',
  method: 'method',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  amount: 'amount',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.MembershipPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  duration: 'duration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.EquipmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  category: 'category',
  brand: 'brand',
  model: 'model',
  serialNumber: 'serialNumber',
  quantity: 'quantity',
  available: 'available',
  inUse: 'inUse',
  maintenance: 'maintenance',
  lastMaintenance: 'lastMaintenance',
  nextMaintenance: 'nextMaintenance',
  status: 'status',
  location: 'location',
  description: 'description',
  imageUrl: 'imageUrl',
  purchaseDate: 'purchaseDate',
  warrantyExpiry: 'warrantyExpiry',
  cost: 'cost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceLogScalarFieldEnum = {
  id: 'id',
  equipmentId: 'equipmentId',
  type: 'type',
  description: 'description',
  cost: 'cost',
  performedBy: 'performedBy',
  performedAt: 'performedAt',
  nextDue: 'nextDue'
};

exports.Prisma.SystemIntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  healthScore: 'healthScore',
  endpoint: 'endpoint',
  apiKey: 'apiKey',
  config: 'config',
  lastSync: 'lastSync',
  errorCount: 'errorCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AutomationWorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  status: 'status',
  priority: 'priority',
  trigger: 'trigger',
  schedule: 'schedule',
  config: 'config',
  successCount: 'successCount',
  failureCount: 'failureCount',
  lastRun: 'lastRun',
  nextRun: 'nextRun',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSyncJobScalarFieldEnum = {
  id: 'id',
  name: 'name',
  source: 'source',
  destination: 'destination',
  status: 'status',
  processedRecords: 'processedRecords',
  failedRecords: 'failedRecords',
  totalRecords: 'totalRecords',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  errorMessage: 'errorMessage',
  config: 'config',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookEndpointScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  method: 'method',
  headers: 'headers',
  events: 'events',
  isActive: 'isActive',
  secret: 'secret',
  lastTriggered: 'lastTriggered',
  successCount: 'successCount',
  failureCount: 'failureCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.APIManagementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  apiKey: 'apiKey',
  permissions: 'permissions',
  rateLimit: 'rateLimit',
  isActive: 'isActive',
  lastUsed: 'lastUsed',
  usageCount: 'usageCount',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ThreatDetectionScalarFieldEnum = {
  id: 'id',
  threatType: 'threatType',
  severity: 'severity',
  status: 'status',
  description: 'description',
  source: 'source',
  evidence: 'evidence',
  assignedTo: 'assignedTo',
  resolvedAt: 'resolvedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnomalyDetectionScalarFieldEnum = {
  id: 'id',
  anomalyType: 'anomalyType',
  confidence: 'confidence',
  status: 'status',
  description: 'description',
  data: 'data',
  severity: 'severity',
  resolvedAt: 'resolvedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComplianceReportScalarFieldEnum = {
  id: 'id',
  reportType: 'reportType',
  status: 'status',
  period: 'period',
  findings: 'findings',
  recommendations: 'recommendations',
  submittedBy: 'submittedBy',
  submittedAt: 'submittedAt',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityWorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  priority: 'priority',
  assignedTo: 'assignedTo',
  dueDate: 'dueDate',
  steps: 'steps',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityIntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  status: 'status',
  endpoint: 'endpoint',
  apiKey: 'apiKey',
  config: 'config',
  lastSync: 'lastSync',
  healthScore: 'healthScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdministrativeProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminLevel: 'adminLevel',
  departments: 'departments',
  responsibilities: 'responsibilities',
  criticalPermissions: 'criticalPermissions',
  emergencyContact: 'emergencyContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomRoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  parentRole: 'parentRole',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  action: 'action',
  resource: 'resource',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleHierarchyScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  parentId: 'parentId',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionAuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  permissionId: 'permissionId',
  oldValue: 'oldValue',
  newValue: 'newValue',
  reason: 'reason',
  performedBy: 'performedBy',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.MemberShipType = exports.$Enums.MemberShipType = {
  MONTHLY: 'MONTHLY',
  DAILY: 'DAILY'
};

exports.EquipmentStatus = exports.$Enums.EquipmentStatus = {
  OPERATIONAL: 'OPERATIONAL',
  MAINTENANCE: 'MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE',
  RETIRED: 'RETIRED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  PREVENTIVE: 'PREVENTIVE',
  CORRECTIVE: 'CORRECTIVE',
  INSPECTION: 'INSPECTION',
  REPAIR: 'REPAIR'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  UserAccessLog: 'UserAccessLog',
  UserIPRestriction: 'UserIPRestriction',
  UserAddress: 'UserAddress',
  UserEmergencyContact: 'UserEmergencyContact',
  UserSocialMedia: 'UserSocialMedia',
  UserPreferences: 'UserPreferences',
  UserNotificationSettings: 'UserNotificationSettings',
  UserPrivacySettings: 'UserPrivacySettings',
  Member: 'Member',
  MemberCheckIn: 'MemberCheckIn',
  MemberAttendance: 'MemberAttendance',
  MemberFitnessGoal: 'MemberFitnessGoal',
  Address: 'Address',
  EmergencyContact: 'EmergencyContact',
  MedicalInfo: 'MedicalInfo',
  Payment: 'Payment',
  Invoice: 'Invoice',
  MembershipPlan: 'MembershipPlan',
  Subscription: 'Subscription',
  Equipment: 'Equipment',
  MaintenanceLog: 'MaintenanceLog',
  SystemIntegration: 'SystemIntegration',
  AutomationWorkflow: 'AutomationWorkflow',
  DataSyncJob: 'DataSyncJob',
  WebhookEndpoint: 'WebhookEndpoint',
  APIManagement: 'APIManagement',
  ThreatDetection: 'ThreatDetection',
  AnomalyDetection: 'AnomalyDetection',
  ComplianceReport: 'ComplianceReport',
  SecurityWorkflow: 'SecurityWorkflow',
  SecurityIntegration: 'SecurityIntegration',
  AdministrativeProfile: 'AdministrativeProfile',
  CustomRole: 'CustomRole',
  Permission: 'Permission',
  RoleHierarchy: 'RoleHierarchy',
  PermissionAudit: 'PermissionAudit'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
