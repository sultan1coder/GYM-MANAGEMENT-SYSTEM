export interface AuditLogEntry {
    action: string;
    userId?: number;
    memberId?: string;
    paymentId?: string;
    details: string;
    ipAddress?: string;
    userAgent?: string;
    metadata?: Record<string, any>;
}
export interface ComplianceCheck {
    paymentId: string;
    checkType: "PCI" | "GDPR" | "AML" | "KYC";
    status: "PASSED" | "FAILED" | "PENDING";
    details: string;
    timestamp: Date;
}
export declare const logPaymentActivity: (entry: AuditLogEntry) => Promise<void>;
export declare const logPaymentCreation: (payment: any, userId: number, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logPaymentUpdate: (paymentId: string, userId: number, changes: Record<string, any>, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logPaymentDeletion: (paymentId: string, userId: number, reason: string, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logPaymentStatusChange: (paymentId: string, userId: number, oldStatus: string, newStatus: string, reason?: string, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logPaymentAccess: (paymentId: string, userId: number, accessType: "VIEW" | "EXPORT" | "REPORT", ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logFailedPaymentAttempt: (memberId: string, amount: number, method: string, error: string, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logSuccessfulPayment: (payment: any, userId: number, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logRefund: (paymentId: string, userId: number, amount: number, reason: string, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logRecurringPaymentCreation: (recurringPayment: any, userId: number, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const logInstallmentPlanCreation: (installmentPlan: any, userId: number, ipAddress?: string, userAgent?: string) => Promise<void>;
export declare const createComplianceCheck: (check: ComplianceCheck) => Promise<void>;
export declare const getPaymentAuditTrail: (paymentId: string) => Promise<({
    User: {
        name: string;
        username: string | null;
        email: string;
        password: string;
        phone_number: string | null;
        role: string;
        id: number;
        profile_picture: string | null;
        tokenVersion: number;
        created_at: Date;
        updated_at: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        bio: string | null;
        dateOfBirth: Date | null;
        department: string | null;
        email_verified: boolean;
        gender: string | null;
        isActive: boolean;
        lastLogin: Date | null;
        lockedUntil: Date | null;
        loginAttempts: number;
        position: string | null;
    } | null;
    Member: {
        name: string;
        email: string;
        password: string;
        phone_number: string | null;
        id: string;
        profile_picture: string | null;
        email_verified: boolean;
        age: number;
        membershiptype: import("../generated/prisma").$Enums.MemberShipType;
        createdAt: Date;
        updatedAt: Date;
        email_verification_expires: Date | null;
        email_verification_token: string | null;
        terms_accepted: boolean;
        terms_accepted_at: Date | null;
    } | null;
} & {
    id: string;
    memberId: string | null;
    details: string;
    action: string;
    userId: number | null;
    paymentId: string | null;
    ipAddress: string | null;
    userAgent: string | null;
    metadata: import("../generated/prisma/runtime/library").JsonValue | null;
    timestamp: Date;
})[]>;
export declare const getMemberPaymentAuditTrail: (memberId: string, limit?: number) => Promise<({
    User: {
        name: string;
        username: string | null;
        email: string;
        password: string;
        phone_number: string | null;
        role: string;
        id: number;
        profile_picture: string | null;
        tokenVersion: number;
        created_at: Date;
        updated_at: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        bio: string | null;
        dateOfBirth: Date | null;
        department: string | null;
        email_verified: boolean;
        gender: string | null;
        isActive: boolean;
        lastLogin: Date | null;
        lockedUntil: Date | null;
        loginAttempts: number;
        position: string | null;
    } | null;
    Payment: {
        id: string;
        status: string;
        createdAt: Date;
        updatedAt: Date;
        memberId: string;
        amount: number;
        method: string;
        description: string | null;
        reference: string | null;
        lateFees: number | null;
        taxAmount: number | null;
        processingFee: number | null;
        currency: string | null;
        gatewayTransactionId: string | null;
        gatewayResponse: import("../generated/prisma/runtime/library").JsonValue | null;
        retryCount: number | null;
        nextRetryDate: Date | null;
    } | null;
} & {
    id: string;
    memberId: string | null;
    details: string;
    action: string;
    userId: number | null;
    paymentId: string | null;
    ipAddress: string | null;
    userAgent: string | null;
    metadata: import("../generated/prisma/runtime/library").JsonValue | null;
    timestamp: Date;
})[]>;
export declare const getUserPaymentAuditTrail: (userId: number, limit?: number) => Promise<({
    Member: {
        name: string;
        email: string;
        password: string;
        phone_number: string | null;
        id: string;
        profile_picture: string | null;
        email_verified: boolean;
        age: number;
        membershiptype: import("../generated/prisma").$Enums.MemberShipType;
        createdAt: Date;
        updatedAt: Date;
        email_verification_expires: Date | null;
        email_verification_token: string | null;
        terms_accepted: boolean;
        terms_accepted_at: Date | null;
    } | null;
    Payment: {
        id: string;
        status: string;
        createdAt: Date;
        updatedAt: Date;
        memberId: string;
        amount: number;
        method: string;
        description: string | null;
        reference: string | null;
        lateFees: number | null;
        taxAmount: number | null;
        processingFee: number | null;
        currency: string | null;
        gatewayTransactionId: string | null;
        gatewayResponse: import("../generated/prisma/runtime/library").JsonValue | null;
        retryCount: number | null;
        nextRetryDate: Date | null;
    } | null;
} & {
    id: string;
    memberId: string | null;
    details: string;
    action: string;
    userId: number | null;
    paymentId: string | null;
    ipAddress: string | null;
    userAgent: string | null;
    metadata: import("../generated/prisma/runtime/library").JsonValue | null;
    timestamp: Date;
})[]>;
export declare const getComplianceReport: (startDate: Date, endDate: Date) => Promise<{
    totalChecks: number;
    byType: Record<string, any>;
    byStatus: Record<string, any>;
    failedChecks: ({
        Payment: {
            Member: {
                name: string;
                email: string;
                password: string;
                phone_number: string | null;
                id: string;
                profile_picture: string | null;
                email_verified: boolean;
                age: number;
                membershiptype: import("../generated/prisma").$Enums.MemberShipType;
                createdAt: Date;
                updatedAt: Date;
                email_verification_expires: Date | null;
                email_verification_token: string | null;
                terms_accepted: boolean;
                terms_accepted_at: Date | null;
            };
        } & {
            id: string;
            status: string;
            createdAt: Date;
            updatedAt: Date;
            memberId: string;
            amount: number;
            method: string;
            description: string | null;
            reference: string | null;
            lateFees: number | null;
            taxAmount: number | null;
            processingFee: number | null;
            currency: string | null;
            gatewayTransactionId: string | null;
            gatewayResponse: import("../generated/prisma/runtime/library").JsonValue | null;
            retryCount: number | null;
            nextRetryDate: Date | null;
        };
    } & {
        id: string;
        status: string;
        details: string;
        paymentId: string;
        timestamp: Date;
        checkType: string;
    })[];
}>;
export declare const exportAuditData: (startDate: Date, endDate: Date, format?: "CSV" | "JSON") => Promise<string | ({
    User: {
        name: string;
        username: string | null;
        email: string;
        password: string;
        phone_number: string | null;
        role: string;
        id: number;
        profile_picture: string | null;
        tokenVersion: number;
        created_at: Date;
        updated_at: Date;
        resetToken: string | null;
        resetTokenExp: Date | null;
        bio: string | null;
        dateOfBirth: Date | null;
        department: string | null;
        email_verified: boolean;
        gender: string | null;
        isActive: boolean;
        lastLogin: Date | null;
        lockedUntil: Date | null;
        loginAttempts: number;
        position: string | null;
    } | null;
    Member: {
        name: string;
        email: string;
        password: string;
        phone_number: string | null;
        id: string;
        profile_picture: string | null;
        email_verified: boolean;
        age: number;
        membershiptype: import("../generated/prisma").$Enums.MemberShipType;
        createdAt: Date;
        updatedAt: Date;
        email_verification_expires: Date | null;
        email_verification_token: string | null;
        terms_accepted: boolean;
        terms_accepted_at: Date | null;
    } | null;
    Payment: {
        id: string;
        status: string;
        createdAt: Date;
        updatedAt: Date;
        memberId: string;
        amount: number;
        method: string;
        description: string | null;
        reference: string | null;
        lateFees: number | null;
        taxAmount: number | null;
        processingFee: number | null;
        currency: string | null;
        gatewayTransactionId: string | null;
        gatewayResponse: import("../generated/prisma/runtime/library").JsonValue | null;
        retryCount: number | null;
        nextRetryDate: Date | null;
    } | null;
} & {
    id: string;
    memberId: string | null;
    details: string;
    action: string;
    userId: number | null;
    paymentId: string | null;
    ipAddress: string | null;
    userAgent: string | null;
    metadata: import("../generated/prisma/runtime/library").JsonValue | null;
    timestamp: Date;
})[]>;
export declare const cleanOldAuditLogs: (daysToKeep?: number) => Promise<number>;
//# sourceMappingURL=paymentAudit.d.ts.map